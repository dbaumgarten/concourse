// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
	jose "github.com/go-jose/go-jose/v3"
)

type FakeSigningKeyFactory struct {
	CreateKeyStub        func(jose.JSONWebKey) error
	createKeyMutex       sync.RWMutex
	createKeyArgsForCall []struct {
		arg1 jose.JSONWebKey
	}
	createKeyReturns struct {
		result1 error
	}
	createKeyReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllKeysStub        func() ([]db.SigningKey, error)
	getAllKeysMutex       sync.RWMutex
	getAllKeysArgsForCall []struct {
	}
	getAllKeysReturns struct {
		result1 []db.SigningKey
		result2 error
	}
	getAllKeysReturnsOnCall map[int]struct {
		result1 []db.SigningKey
		result2 error
	}
	GetNewestKeyStub        func(db.SigningKeyType) (db.SigningKey, error)
	getNewestKeyMutex       sync.RWMutex
	getNewestKeyArgsForCall []struct {
		arg1 db.SigningKeyType
	}
	getNewestKeyReturns struct {
		result1 db.SigningKey
		result2 error
	}
	getNewestKeyReturnsOnCall map[int]struct {
		result1 db.SigningKey
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigningKeyFactory) CreateKey(arg1 jose.JSONWebKey) error {
	fake.createKeyMutex.Lock()
	ret, specificReturn := fake.createKeyReturnsOnCall[len(fake.createKeyArgsForCall)]
	fake.createKeyArgsForCall = append(fake.createKeyArgsForCall, struct {
		arg1 jose.JSONWebKey
	}{arg1})
	stub := fake.CreateKeyStub
	fakeReturns := fake.createKeyReturns
	fake.recordInvocation("CreateKey", []interface{}{arg1})
	fake.createKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKeyFactory) CreateKeyCallCount() int {
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	return len(fake.createKeyArgsForCall)
}

func (fake *FakeSigningKeyFactory) CreateKeyCalls(stub func(jose.JSONWebKey) error) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = stub
}

func (fake *FakeSigningKeyFactory) CreateKeyArgsForCall(i int) jose.JSONWebKey {
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	argsForCall := fake.createKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigningKeyFactory) CreateKeyReturns(result1 error) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = nil
	fake.createKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningKeyFactory) CreateKeyReturnsOnCall(i int, result1 error) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = nil
	if fake.createKeyReturnsOnCall == nil {
		fake.createKeyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createKeyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningKeyFactory) GetAllKeys() ([]db.SigningKey, error) {
	fake.getAllKeysMutex.Lock()
	ret, specificReturn := fake.getAllKeysReturnsOnCall[len(fake.getAllKeysArgsForCall)]
	fake.getAllKeysArgsForCall = append(fake.getAllKeysArgsForCall, struct {
	}{})
	stub := fake.GetAllKeysStub
	fakeReturns := fake.getAllKeysReturns
	fake.recordInvocation("GetAllKeys", []interface{}{})
	fake.getAllKeysMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigningKeyFactory) GetAllKeysCallCount() int {
	fake.getAllKeysMutex.RLock()
	defer fake.getAllKeysMutex.RUnlock()
	return len(fake.getAllKeysArgsForCall)
}

func (fake *FakeSigningKeyFactory) GetAllKeysCalls(stub func() ([]db.SigningKey, error)) {
	fake.getAllKeysMutex.Lock()
	defer fake.getAllKeysMutex.Unlock()
	fake.GetAllKeysStub = stub
}

func (fake *FakeSigningKeyFactory) GetAllKeysReturns(result1 []db.SigningKey, result2 error) {
	fake.getAllKeysMutex.Lock()
	defer fake.getAllKeysMutex.Unlock()
	fake.GetAllKeysStub = nil
	fake.getAllKeysReturns = struct {
		result1 []db.SigningKey
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningKeyFactory) GetAllKeysReturnsOnCall(i int, result1 []db.SigningKey, result2 error) {
	fake.getAllKeysMutex.Lock()
	defer fake.getAllKeysMutex.Unlock()
	fake.GetAllKeysStub = nil
	if fake.getAllKeysReturnsOnCall == nil {
		fake.getAllKeysReturnsOnCall = make(map[int]struct {
			result1 []db.SigningKey
			result2 error
		})
	}
	fake.getAllKeysReturnsOnCall[i] = struct {
		result1 []db.SigningKey
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningKeyFactory) GetNewestKey(arg1 db.SigningKeyType) (db.SigningKey, error) {
	fake.getNewestKeyMutex.Lock()
	ret, specificReturn := fake.getNewestKeyReturnsOnCall[len(fake.getNewestKeyArgsForCall)]
	fake.getNewestKeyArgsForCall = append(fake.getNewestKeyArgsForCall, struct {
		arg1 db.SigningKeyType
	}{arg1})
	stub := fake.GetNewestKeyStub
	fakeReturns := fake.getNewestKeyReturns
	fake.recordInvocation("GetNewestKey", []interface{}{arg1})
	fake.getNewestKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigningKeyFactory) GetNewestKeyCallCount() int {
	fake.getNewestKeyMutex.RLock()
	defer fake.getNewestKeyMutex.RUnlock()
	return len(fake.getNewestKeyArgsForCall)
}

func (fake *FakeSigningKeyFactory) GetNewestKeyCalls(stub func(db.SigningKeyType) (db.SigningKey, error)) {
	fake.getNewestKeyMutex.Lock()
	defer fake.getNewestKeyMutex.Unlock()
	fake.GetNewestKeyStub = stub
}

func (fake *FakeSigningKeyFactory) GetNewestKeyArgsForCall(i int) db.SigningKeyType {
	fake.getNewestKeyMutex.RLock()
	defer fake.getNewestKeyMutex.RUnlock()
	argsForCall := fake.getNewestKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigningKeyFactory) GetNewestKeyReturns(result1 db.SigningKey, result2 error) {
	fake.getNewestKeyMutex.Lock()
	defer fake.getNewestKeyMutex.Unlock()
	fake.GetNewestKeyStub = nil
	fake.getNewestKeyReturns = struct {
		result1 db.SigningKey
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningKeyFactory) GetNewestKeyReturnsOnCall(i int, result1 db.SigningKey, result2 error) {
	fake.getNewestKeyMutex.Lock()
	defer fake.getNewestKeyMutex.Unlock()
	fake.GetNewestKeyStub = nil
	if fake.getNewestKeyReturnsOnCall == nil {
		fake.getNewestKeyReturnsOnCall = make(map[int]struct {
			result1 db.SigningKey
			result2 error
		})
	}
	fake.getNewestKeyReturnsOnCall[i] = struct {
		result1 db.SigningKey
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningKeyFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	fake.getAllKeysMutex.RLock()
	defer fake.getAllKeysMutex.RUnlock()
	fake.getNewestKeyMutex.RLock()
	defer fake.getNewestKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigningKeyFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SigningKeyFactory = new(FakeSigningKeyFactory)
