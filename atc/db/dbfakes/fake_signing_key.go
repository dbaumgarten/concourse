// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"
	"time"

	"github.com/concourse/concourse/atc/db"
	jose "github.com/go-jose/go-jose/v3"
)

type FakeSigningKey struct {
	CreatedAtStub        func() time.Time
	createdAtMutex       sync.RWMutex
	createdAtArgsForCall []struct {
	}
	createdAtReturns struct {
		result1 time.Time
	}
	createdAtReturnsOnCall map[int]struct {
		result1 time.Time
	}
	DeleteStub        func() error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 string
	}
	iDReturnsOnCall map[int]struct {
		result1 string
	}
	JWKStub        func() jose.JSONWebKey
	jWKMutex       sync.RWMutex
	jWKArgsForCall []struct {
	}
	jWKReturns struct {
		result1 jose.JSONWebKey
	}
	jWKReturnsOnCall map[int]struct {
		result1 jose.JSONWebKey
	}
	KeyTypeStub        func() db.SigningKeyType
	keyTypeMutex       sync.RWMutex
	keyTypeArgsForCall []struct {
	}
	keyTypeReturns struct {
		result1 db.SigningKeyType
	}
	keyTypeReturnsOnCall map[int]struct {
		result1 db.SigningKeyType
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigningKey) CreatedAt() time.Time {
	fake.createdAtMutex.Lock()
	ret, specificReturn := fake.createdAtReturnsOnCall[len(fake.createdAtArgsForCall)]
	fake.createdAtArgsForCall = append(fake.createdAtArgsForCall, struct {
	}{})
	stub := fake.CreatedAtStub
	fakeReturns := fake.createdAtReturns
	fake.recordInvocation("CreatedAt", []interface{}{})
	fake.createdAtMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKey) CreatedAtCallCount() int {
	fake.createdAtMutex.RLock()
	defer fake.createdAtMutex.RUnlock()
	return len(fake.createdAtArgsForCall)
}

func (fake *FakeSigningKey) CreatedAtCalls(stub func() time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = stub
}

func (fake *FakeSigningKey) CreatedAtReturns(result1 time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = nil
	fake.createdAtReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeSigningKey) CreatedAtReturnsOnCall(i int, result1 time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = nil
	if fake.createdAtReturnsOnCall == nil {
		fake.createdAtReturnsOnCall = make(map[int]struct {
			result1 time.Time
		})
	}
	fake.createdAtReturnsOnCall[i] = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeSigningKey) Delete() error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
	}{})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKey) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSigningKey) DeleteCalls(stub func() error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeSigningKey) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningKey) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningKey) ID() string {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	stub := fake.IDStub
	fakeReturns := fake.iDReturns
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKey) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeSigningKey) IDCalls(stub func() string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeSigningKey) IDReturns(result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSigningKey) IDReturnsOnCall(i int, result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSigningKey) JWK() jose.JSONWebKey {
	fake.jWKMutex.Lock()
	ret, specificReturn := fake.jWKReturnsOnCall[len(fake.jWKArgsForCall)]
	fake.jWKArgsForCall = append(fake.jWKArgsForCall, struct {
	}{})
	stub := fake.JWKStub
	fakeReturns := fake.jWKReturns
	fake.recordInvocation("JWK", []interface{}{})
	fake.jWKMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKey) JWKCallCount() int {
	fake.jWKMutex.RLock()
	defer fake.jWKMutex.RUnlock()
	return len(fake.jWKArgsForCall)
}

func (fake *FakeSigningKey) JWKCalls(stub func() jose.JSONWebKey) {
	fake.jWKMutex.Lock()
	defer fake.jWKMutex.Unlock()
	fake.JWKStub = stub
}

func (fake *FakeSigningKey) JWKReturns(result1 jose.JSONWebKey) {
	fake.jWKMutex.Lock()
	defer fake.jWKMutex.Unlock()
	fake.JWKStub = nil
	fake.jWKReturns = struct {
		result1 jose.JSONWebKey
	}{result1}
}

func (fake *FakeSigningKey) JWKReturnsOnCall(i int, result1 jose.JSONWebKey) {
	fake.jWKMutex.Lock()
	defer fake.jWKMutex.Unlock()
	fake.JWKStub = nil
	if fake.jWKReturnsOnCall == nil {
		fake.jWKReturnsOnCall = make(map[int]struct {
			result1 jose.JSONWebKey
		})
	}
	fake.jWKReturnsOnCall[i] = struct {
		result1 jose.JSONWebKey
	}{result1}
}

func (fake *FakeSigningKey) KeyType() db.SigningKeyType {
	fake.keyTypeMutex.Lock()
	ret, specificReturn := fake.keyTypeReturnsOnCall[len(fake.keyTypeArgsForCall)]
	fake.keyTypeArgsForCall = append(fake.keyTypeArgsForCall, struct {
	}{})
	stub := fake.KeyTypeStub
	fakeReturns := fake.keyTypeReturns
	fake.recordInvocation("KeyType", []interface{}{})
	fake.keyTypeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningKey) KeyTypeCallCount() int {
	fake.keyTypeMutex.RLock()
	defer fake.keyTypeMutex.RUnlock()
	return len(fake.keyTypeArgsForCall)
}

func (fake *FakeSigningKey) KeyTypeCalls(stub func() db.SigningKeyType) {
	fake.keyTypeMutex.Lock()
	defer fake.keyTypeMutex.Unlock()
	fake.KeyTypeStub = stub
}

func (fake *FakeSigningKey) KeyTypeReturns(result1 db.SigningKeyType) {
	fake.keyTypeMutex.Lock()
	defer fake.keyTypeMutex.Unlock()
	fake.KeyTypeStub = nil
	fake.keyTypeReturns = struct {
		result1 db.SigningKeyType
	}{result1}
}

func (fake *FakeSigningKey) KeyTypeReturnsOnCall(i int, result1 db.SigningKeyType) {
	fake.keyTypeMutex.Lock()
	defer fake.keyTypeMutex.Unlock()
	fake.KeyTypeStub = nil
	if fake.keyTypeReturnsOnCall == nil {
		fake.keyTypeReturnsOnCall = make(map[int]struct {
			result1 db.SigningKeyType
		})
	}
	fake.keyTypeReturnsOnCall[i] = struct {
		result1 db.SigningKeyType
	}{result1}
}

func (fake *FakeSigningKey) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createdAtMutex.RLock()
	defer fake.createdAtMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.jWKMutex.RLock()
	defer fake.jWKMutex.RUnlock()
	fake.keyTypeMutex.RLock()
	defer fake.keyTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigningKey) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SigningKey = new(FakeSigningKey)
